#!/usr/bin/env bash
# scripts/docker-entrypoint.sh
set -e

echo "Running Alembic migrations..."
MIGRATIONS_DIR="/app/src/hoffmagic/db/migrations"
ALEMBIC_INI_MOUNTED="/app/alembic.ini" # Path where docker-compose mounts it

echo "Checking migrations directory structure:"
ls -la "$MIGRATIONS_DIR" || echo "Migrations directory not found or empty."

# Check if env.py exists, if not initialize alembic environment files
if [ ! -f "$MIGRATIONS_DIR/env.py" ]; then
  echo "Initializing Alembic environment files in $MIGRATIONS_DIR..."
  # Run init, targeting the correct directory. This also creates alembic.ini in PWD (/app)
  # Use -t async template for FastAPI/SQLAlchemy async
  python -m alembic init -t async "$MIGRATIONS_DIR"

  # Remove the alembic.ini created by 'init' in /app, we want to use the mounted one
  # Check if the file exists and is NOT the one we expect to be mounted
  if [ -f "/app/alembic.ini" ] && [ "$ALEMBIC_INI_MOUNTED" != "/app/alembic.ini" ]; then
      echo "Removing alembic.ini generated by init to use the mounted one."
      rm /app/alembic.ini
  elif [ ! -f "$ALEMBIC_INI_MOUNTED" ]; then
      # This case should ideally not happen with docker-compose, but handle it
      echo "Warning: No alembic.ini seems to be mounted at $ALEMBIC_INI_MOUNTED. Using the one generated by init."
      # If using the generated one, ensure its sqlalchemy.url is set from ENV
      echo "Updating sqlalchemy.url in generated alembic.ini..."
      sed -i "s|^sqlalchemy.url = .*|sqlalchemy.url = ${DATABASE_URL}|" /app/alembic.ini
      ALEMBIC_INI_TO_USE="/app/alembic.ini" # Use the generated one
  else
      ALEMBIC_INI_TO_USE="$ALEMBIC_INI_MOUNTED" # Use the mounted one
  fi
else
    ALEMBIC_INI_TO_USE="$ALEMBIC_INI_MOUNTED" # env.py exists, use the mounted ini
fi

# Ensure the target MetaData is set in the generated env.py if it was just created
# This requires knowing the path to your models.py Base
# Example: sed -i 's/target_metadata = None/from hoffmagic.db.models import Base\ntarget_metadata = Base.metadata/' "$MIGRATIONS_DIR/env.py"
# You might need to adjust this based on your actual models location and Base object name.
# For now, we assume the user will handle the env.py content manually if needed after the first run.

# Now run migrations using the determined config file
echo "Running Alembic upgrade using config: $ALEMBIC_INI_TO_USE..."
python -m alembic -c "$ALEMBIC_INI_TO_USE" upgrade head

echo "Starting Uvicorn..."
HOST=${HOST:-0.0.0.0}
PORT=${PORT:-8000}
# Rely on PATH to find python and use -m
python -m uvicorn hoffmagic.main:app --host "$HOST" --port "$PORT"
