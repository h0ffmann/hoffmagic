# alembic.ini
# A generic Alembic configuration file.

[alembic]
# path to migration scripts
# This MUST be the absolute path inside the container where the migrations
# volume is mounted (as defined in docker-compose.yml) relative to the
# working directory (/app) where alembic is run.
script_location = /app/migrations

# template used to generate migration files
# file_template = %%(rev)s_%%(slug)s

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python-dateutil library that is pip installed
# with Alembic.
# defaults to UTC if no timezone specified
# timezone =

# sys.path path, will be prepended to sys.path if present.
# defaults to nothing
# prepend_sys_path = .

# Logging configuration
logging_config_file =

# database connect URL, e.g. driver://user:pass@localhost/dbname
# Uses environment variable interpolation ${VAR_NAME}.
# The default fallback is useful for local testing if DATABASE_URL isn't set.
# Ensure DATABASE_URL is set correctly in your Docker environment (docker-compose.yml).
sqlalchemy.url = ${DATABASE_URL:postgresql+psycopg://hoffmagic:hoffmagic@localhost:5432/hoffmagic}


# truncation length migration file names, default is 40
# new in Alembic 1.13. Increase this if slugs are long.
# revision_name_max_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc migrations files
# omit_pyc_files = false


# Set to true if database supports transactional DDL
transactional_ddl = false

# Substitute values into the configuration
# from environment variables. SafeEnvInterpolation adopts Python's
# interpolation behavior. ${THIS_VARIABLE} will be replaced by the
# value of environment variable THIS_VARIABLE; ${THIS_VARIABLE:default value}
# provides a default if the variable is unset. Optional substitution
# variables default to os.environ.
# env_interpolation_options = safe


[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision files. Takes a space-separate list
# of hook names. hook names are defined sections within this file using
# the convention "post_write_hook.<hook name>". Unspecified hooks produce errors.
# hooks =

# a sample hook pointing towards the built-in black hook
# hooks = black

# defines the "black" hook. ".type" indicates the type of hook: "console_scripts",
# or "exec". See the documentation for writing hooks to create your own type.
# ".entrypoint" is the path to the console script or executable file for the hook.
# ".[argument name]" defines named arguments for the hook defined by ".entrypoint".
#[post_write_hook.black]
#type = console_scripts
#entrypoint = black
#options = --line-length=88

[logging]
# Standard Python logging config. See python logging documentation.

[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
# Alternatively:
# format = %(asctime)s %(levelname)-5.5s [%(name)s] %(message)s
# datefmt = %Y-%m-%d %H:%M:%S
